<?php

namespace common\models;

use api\modules\v1\models\forms\CustomerForm;
use common\helpers\TelegramHelper;
use common\helpers\TelegramWebHook;
use common\helpers\Utilities;
use common\models\constants\CustomerFamilyStatus;
use common\models\constants\CustomerStatus;
use common\models\constants\GeneralStatus;
use Yii;

/**
 * This is the model class for table "telegram_message".
 *
 * @property int $id
 * @property string $tg_id
 * @property string $chat_id
 * @property string|null $username
 * @property string|null $tg_first_name
 * @property string|null $tg_last_name
 * @property string|null $phone
 * @property string|null $extra_phone
 * @property string|null $passer
 * @property string|null $pasnum
 * @property string|null $pasdob
 * @property string|null $first_name
 * @property string|null $full_name
 * @property string|null $full_address
 * @property string|null $tg_full_name
 * @property string|null $last_name
 * @property string|null $middle_name
 * @property string|null $pinfl
 * @property string|null $region_name
 * @property string|null $city_name
 * @property string|null $address
 * @property string|null $pasimg1
 * @property string|null $pasimg2
 * @property string|null $pasimg3
 * @property integer|null $work_region_id
 * @property integer|null $work_city_id
 * @property string|null $work_address
 * @property double|null $salary
 * @property string|null $office
 * @property string|null $position
 * @property string|null $card_number
 * @property string|null $expiry
 * @property string|null $otp
 * @property int|null $created_at
 * @property int|null $updated_at
 * @property int $type
 */
class TelegramMessage extends \common\models\BaseTimestampedModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'telegram_message';
    }

    public function beforeSave($insert)
    {
        foreach ($this as $field => $value)
            $this->{$field} = strip_tags($this->{$field}, Utilities::allowedTags());
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['tg_id', 'chat_id'], 'required'],
            [['address', 'created_at', 'updated_at'], 'default', 'value' => null],
            [['created_at', 'updated_at', 'work_region_id', 'work_city_id', 'type'], 'integer'],
            [['tg_id', 'chat_id', 'address', 'username', 'office', 'position', 'card_number', 'expiry', 'otp', 'tg_first_name', 'work_address', 'tg_last_name', 'phone', 'extra_phone', 'passer', 'pasnum', 'pasdob', 'first_name', 'last_name', 'middle_name', 'pinfl', 'region_name', 'city_name', 'pasimg1', 'pasimg2', 'pasimg3'], 'string', 'max' => 255],
            [['phone', 'extra_phone'], 'match', 'pattern' => '/((\+998)|0)[-]?[0-9]{9}/'],
            ['salary', 'number'],
            [['passer'], 'match', 'skipOnEmpty' => true, 'pattern' => '/^[A-Z]{2}/'],
            [['pasnum'], 'match', 'skipOnEmpty' => true, 'pattern' => '/^[0-9]{7}/'],
            [['pinfl'], 'match', 'skipOnEmpty' => true, 'pattern' => '/^[3-6]{1}[0-3]{1}[0-9]{1}[0-1]{1}[0-9]{1}[0-9]{9}/'],
            [['pasdob'], 'match', 'skipOnEmpty' => true, 'pattern' => '/^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'tg_id' => Yii::t('app', 'Tg ID'),
            'chat_id' => Yii::t('app', 'Chat ID'),
            'username' => Yii::t('app', 'Username'),
            'tg_first_name' => Yii::t('app', 'Tg First Name'),
            'tg_last_name' => Yii::t('app', 'Tg Last Name'),
            'phone' => Yii::t('app', 'Phone'),
            'extra_phone' => Yii::t('app', 'Extra Phone'),
            'passer' => Yii::t('app', 'Passer'),
            'pasnum' => Yii::t('app', 'Pasnum'),
            'pasdob' => Yii::t('app', 'Pasdob'),
            'first_name' => Yii::t('app', 'First Name'),
            'last_name' => Yii::t('app', 'Last Name'),
            'middle_name' => Yii::t('app', 'Middle Name'),
            'pinfl' => Yii::t('app', 'Pinfl'),
            'region_name' => Yii::t('app', 'Region Name'),
            'city_name' => Yii::t('app', 'City Name'),
            'address' => Yii::t('app', 'Address'),
            'type' => Yii::t('app', 'Type'),
            'pasimg1' => Yii::t('app', 'Pasimg1'),
            'pasimg2' => Yii::t('app', 'Pasimg2'),
            'pasimg3' => Yii::t('app', 'Pasimg3'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    private function isReady()
    {
        $customer = Customer::findOne(['pin' => $this->pinfl]);
        if ($customer != null && $customer->isReady)
            return true;
        $not_important_fields = ['username', 'tg_first_name', 'tg_last_name'];
        $temp_fields = ['work_region_id',
            'work_city_id',
            'work_address',
            'salary',
            'office',
            'position',
            'card_number',
            'expiry',
            'otp',];
        //['work_region_id', 'work_city_id', 'address', 'username', 'office', 'position', 'card_number', 'expiry', 'otp'];
        foreach ($this as $field => $value) {
            if (!in_array($field, $not_important_fields) && !in_array($field, $temp_fields) && is_null($value)) {
                return false;
            }
        }
        return true;
    }

    private function setOrGetCustomer()
    {
        $customer = Customer::findOne(['pin' => $this->pinfl]);
        if ($customer == null) {
            try {
                $customer = new Customer();
                $customer->createYourSelf([
                    'pin' => $this->pinfl,
                    'first_name' => mb_strtoupper(Utilities::ciril2lotin($this->first_name), "utf-8"),
                    'last_name' => mb_strtoupper(Utilities::ciril2lotin($this->last_name), "utf-8"),
                    'middle_name' => mb_strtoupper(Utilities::ciril2lotin($this->middle_name), "utf-8"),
                    'region_name' => $this->region_name,
                    'city_name' => $this->city_name,
                    'birth_date' => $this->pasdob,
                    'phone' => $this->phone,
                    'extra_phone' => $this->extra_phone
                ]);
                $customer->updateAttributes(['status' => CustomerStatus::STATUS_PRE_CHECKING]);
                $customer->createPassport([
                    'passport_seria' => mb_strtoupper(Utilities::ciril2lotin($this->passer), "utf-8"),
                    'passport_number' => $this->pasnum,
                    'passport_given_date' => date('d.m.Y')
                ]);
                return $customer;
            } catch (\Exception $exception) {
                $telegram = new TelegramHelper(false);
                $telegram->sendMessage(json_encode($exception));
                return null;
            }
        }
        return $customer;
    }

    /**
     * @return Customer|null
     */
    public function createOrGetCustomer()
    {
        $customer = null;
        if ($this->isReady())
            $customer = $this->setOrGetCustomer();
        if ($customer == null)
            return null;
        $customer->getCustomer_in_bot();
        return $customer;
    }

    public function getAndSendCustomer()
    {
        $customer = $this->setOrGetCustomer();
        if ($customer != null) {
            $telegramHook = new TelegramWebHook();
            $telegramHook->sendNewOrder($this);
        }
        return $customer;
    }

    /**
     * @param Customer $customer
     * @return void
     */
    public function saveImages(Customer $customer)
    {
        CustomerForm::saveImageAsStatic($customer->id, $this->pasimg1, $this->pasimg2, $this->pasimg3);
    }

    public function getFull_name()
    {
        return $this->first_name . ' ' . $this->last_name . ' ' . $this->middle_name;
    }

    public function getTg_Full_name()
    {
        return $this->tg_first_name . ' ' . $this->tg_last_name . ' ' . $this->username;
    }

    public function getFull_address()
    {
        return $this->region_name . ', ' . $this->city_name . ', ' . $this->address;
    }

    public function createWork()
    {
        $work = new CustomerWork();
        $work->company_id = 1;
        $work->customer_id = $this->createOrGetCustomer()->id;
        $work->work_region_id = $this->work_region_id;
        $work->work_city_id = $this->work_city_id;
        $work->work_address = $this->work_address;
        $work->office = $this->office;
        $work->position = $this->position;
        $work->salary = $this->salary;
        $work->status = GeneralStatus::STATUS_ACTIVE;
        $work->save();
    }

    public function assign(Customer $customer)
    {
        if ($this->createOrGetCustomer() == null) {
            $this->updateAttributes(['pinfl' => $customer->pin]);
            $this->first_name = $customer->first_name;
            $this->last_name = $customer->last_name;
            $this->middle_name = $customer->first_name;
            $this->region_name = $customer->region_name;
            $this->city_name = $customer->city_name;
            $this->phone = $customer->phone;
            $this->extra_phone = $customer->extra_phone;
            $passport = $customer->first_passport;
            if ($passport != null) {
                $this->passer = $passport->passport_seria;
                $this->pasnum = $passport->passport_number;
            }
            $this->pasdob = date("d.m.Y", $customer->birth_date);
            $this->address = $customer->address;
            return $this->save();
        }
        return true;
    }

    public function clearMainData()
    {
        $this->passer = null;
        $this->pasnum = null;
        $this->pasdob = null;
        $this->pinfl = null;
        $this->save();
    }
}
